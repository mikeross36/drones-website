"use strict";class Cart{async getItems(){try{const t=await fetch("/data/cart-data/cart-items.json");return await t.json()}catch(t){console.log(t)}}displayCartItems(t){let e="";t.forEach((t=>{e+=`\n                <figure class="cart__card">\n                    <div class="cart__box">\n                        <img src="${t.image}" alt="" class="cart__img">\n                    </div>\n                    <div class="cart__details">\n                        <h4 class="cart__title">${t.title}</h4>\n                        <span class="cart__price">${t.price} €</span>\n                        <div class="cart__amount">\n                            <div class="cart__amount-content">\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-down.svg" alt="" width="20px" height="20px">\n                                </span>\n                                <span class="cart_amount-number">0</span>\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-up.svg" alt="" width="20px" height="20px">\n                                </span>\n                            </div>\n                            <img src="/app/images/can-trash.svg" alt="" class="cart__amount-trash" width="20px" height="20px">\n                        </div>\n                    </div>\n                </figure>\n            `}));const n=document.querySelector(".cart__container");n&&n.insertAdjacentHTML("beforeend",e)}toggleCart(){const t=document.getElementById("cart"),e=document.getElementById("cart-shop"),n=document.getElementById("cart-close");e&&e.addEventListener("click",(()=>{t.classList.add("show-cart")})),n&&n.addEventListener("click",(()=>{t.classList.remove("show-cart")}))}}(async()=>{const t=new Cart,e=await t.getItems();t.displayCartItems(e),t.toggleCart()})();class Featured{getItems=async()=>{try{const t=await fetch("/data/featured-data/featured-items.json");return await t.json()}catch(t){console.error(t)}};displayItems=t=>{let e="";t.forEach((t=>{e+=`\n                <article class="featured__card">\n                    <span class="featured__tag">sale</span>\n                    <img src="${t.image}" alt="featured" class="featured__img">\n                    <div clas="featured__data">\n                        <h3 class="featured__title">${t.title}</h3>\n                        <span class="featured__price">${t.price}</span>\n                        <button class="button featured__button">add to cart</button>\n                    </div>\n                </article>\n            `}));const n=document.querySelector(".featured__container");n&&n.insertAdjacentHTML("beforeend",e)}}(async()=>{const t=new Featured,e=await t.getItems();t.displayItems(e)})();const domElements=()=>{const t=document.querySelector(".nav__list"),e=document.querySelector(".nav__menu");return{navList:t,navMenu:e,closeNavMenu:()=>{e&&e.classList.remove("show-menu")}}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu}=domElements();class NavLinks{getLinks=async()=>{try{const t=await fetch("/data/nav-data/navlinks.json");return await t.json()}catch(t){console.error(t)}};displayLinks=t=>{let e="";t.forEach((t=>{e+=`\n                <li class="nav__item">\n                    <a href="${t.link}" class="nav__link" onclick="closeNavMenu()">${t.text}</a>\n                </li>\n            `})),navList&&navList.insertAdjacentHTML("beforeend",e)}}(async()=>{const t=new NavLinks,e=await t.getLinks();t.displayLinks(e)})();class Products{async getProducts(){try{const t=await fetch("/data/product-data/product-items.json");return await t.json()}catch(t){console.log(t)}}displayProducts(t){let e="";t.forEach((t=>{e+=`\n                <figure class="products__card">\n                    <img src="${t.image}" alt="" class="products__img">\n                    <h3 class="products__title">${t.title}</h3>\n                    <span class="products__price">${t.price} €</span>\n                    <button class="products__button">\n                        <img src="/app/images/shopping-cart.svg" alt="" width="30px" height="30px">\n                    </button>\n                </figure>\n            `}));const n=document.querySelector(".products__container");return n&&n.insertAdjacentHTML("beforeend",e),t}}function toggleSearch(){const t=document.querySelector(".nav__search"),e=document.querySelector(".nav__search-form"),n=document.querySelector(".close__search"),a=document.querySelector(".nav__search-input");e&&(t.addEventListener("click",(()=>{e.classList.toggle("active-form")})),n.addEventListener("click",(()=>{e.classList.remove("active-form"),a.value=""})))}function filterSearch(){const t=document.querySelector(".nav__search-input").value.toLowerCase();document.querySelectorAll("section").forEach((e=>{t&&e.id.toString().toLowerCase().indexOf(t)>-1&&document.getElementById(e.id).scrollIntoView()}))}function headerOnScroll(){const t=document.getElementById("header");document.body.scrollTop>0||document.documentElement.scrollTop>0?(t.style.background="#1f1f1f",t.style.boxShadow="0 1px 4px #0a0a0a4d"):0!==document.body.scrollTop&&0!==document.documentElement.scrollTop||(t.style.background="transparent",t.style.boxShadow="none")}function sliderAction(){const t=[...document.querySelectorAll(".testimonial__slide")],e=document.querySelector(".slider__button-next"),n=document.querySelector(".slider__button-prev");let a=0;const s=e=>{e>=t.length?e=0:e<0&&(e=t.length-1),t[a].classList.toggle("active"),t[e].classList.toggle("active"),a=e};e.addEventListener("click",(()=>{s(a+1)})),n.addEventListener("click",(()=>{s(a-1)}))}function toggleMobMenu(){const t=document.getElementById("nav-menu"),e=document.getElementById("nav-toggle"),n=document.getElementById("nav-close"),a=document.querySelector(".nav__search-form");t&&(e.addEventListener("click",(()=>{t.classList.add("show-menu"),function(){if(a.classList.contains("active-form"))a.classList.remove("active-form")}()})),n.addEventListener("click",(()=>{t.classList.remove("show-menu")})))}(async()=>{const t=new Products,e=await t.getProducts();t.displayProducts(e)})(),window.onscroll=function(){headerOnScroll()},toggleMobMenu(),toggleSearch(),sliderAction();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
