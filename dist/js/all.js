"use strict";class Cart{async getItems(){try{const e=await fetch("/data/cart-data/cart-items.json");return await e.json()}catch(e){console.log(e)}}displayCartItems(e){let t="";e.forEach((e=>{t+=`\n                <figure class="cart__card">\n                    <div class="cart__box">\n                        <img src="${e.image}" alt="" class="cart__img">\n                    </div>\n                    <div class="cart__details">\n                        <h4 class="cart__title">${e.title}</h4>\n                        <span class="cart__price">${e.price} €</span>\n                        <div class="cart__amount">\n                            <div class="cart__amount-content">\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-down.svg" alt="" width="20px" height="20px">\n                                </span>\n                                <span class="cart_amount-number">0</span>\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-up.svg" alt="" width="20px" height="20px">\n                                </span>\n                            </div>\n                            <img src="/app/images/can-trash.svg" alt="" class="cart__amount-trash" width="20px" height="20px">\n                        </div>\n                    </div>\n                </figure>\n            `}));const n=document.querySelector(".cart__container");n&&n.insertAdjacentHTML("beforeend",t)}toggleCart(){const e=document.getElementById("cart"),t=document.getElementById("cart-shop"),n=document.getElementById("cart-close");t&&t.addEventListener("click",(()=>{e.classList.add("show-cart")})),n&&n.addEventListener("click",(()=>{e.classList.remove("show-cart")}))}}(async()=>{const e=new Cart,t=await e.getItems();e.displayCartItems(t),e.toggleCart()})();class Featured{getItems=async()=>{try{const e=await fetch("/data/featured-data/featured-items.json");return await e.json()}catch(e){console.error(e)}};displayItems=e=>{let t="";e.forEach((e=>{t+=`\n                <article class="featured__card">\n                    <span class="featured__tag">sale</span>\n                    <img src="${e.image}" alt="featured" class="featured__img">\n                    <div clas="featured__data">\n                        <h3 class="featured__title">${e.title}</h3>\n                        <span class="featured__price">${e.price}</span>\n                        <button class="button featured__button">add to cart</button>\n                    </div>\n                </article>\n            `}));const n=document.querySelector(".featured__container");n&&n.insertAdjacentHTML("beforeend",t)}}(async()=>{const e=new Featured,t=await e.getItems();e.displayItems(t)})();const domElements=()=>{const e=document.querySelector(".nav__list"),t=document.querySelector(".nav__menu");return{navList:e,navMenu:t,closeNavMenu:()=>{t&&t.classList.remove("show-menu")}}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu}=domElements();class NavLinks{getLinks=async()=>{try{const e=await fetch("/data/nav-data/navlinks.json");return await e.json()}catch(e){console.error(e)}};displayLinks=e=>{let t="";e.forEach((e=>{t+=`\n                <li class="nav__item">\n                    <a href="${e.link}" class="nav__link" onclick="closeNavMenu()">${e.text}</a>\n                </li>\n            `})),navList&&navList.insertAdjacentHTML("beforeend",t)}}(async()=>{const e=new NavLinks,t=await e.getLinks();e.displayLinks(t)})();class Drones{async getDrones(){try{const e=await fetch("/data/new-data/new-data.json");return await e.json()}catch(e){console.error(e)}}displayDrones=e=>{const t=document.querySelector(".new__container");e.forEach((e=>{t&&t.insertAdjacentHTML("beforeend",`\n                <article class="new__card">\n                    <span class="new__tag">New</span>\n                    <img src="${e.image}" alt="new drone" class="new__img">\n                    <div class="new__data">\n                        <h3 class="new__title">${e.title}</h3>\n                        <span class="new__price">${e.price}</span>\n                    </div>\n                    <ul class="new__social">\n                        <li>\n                            <a href="${e.faceUrl}" target="_blank" class="new__social-link">\n                                <img src="${e.faceIcon}" alt="" width="30px" height="30px">\n                            </a>\n                        </li>\n                        <li>\n                            <a href="${e.twitterUrl}" target="_blank" class="new__social-link">\n                                <img src="${e.twitterIcon}" alt="" width="30px" height="30px">\n                            </a>\n                        </li>\n                        <li>\n                            <a href="${e.instaUrl}" target="_blank" class="new__social-link">\n                                <img src="${e.instaIcon}" alt="" width="30px" height="30px">\n                            </a>\n                        </li>\n                    </ul>\n                </article>`)}))}}(async()=>{const e=new Drones,t=await e.getDrones();e.displayDrones(t)})();class Products{async getProducts(){try{const e=await fetch("/data/product-data/product-items.json");return await e.json()}catch(e){console.log(e)}}displayProducts(e){let t="";e.forEach((e=>{t+=`\n                <figure class="products__card">\n                    <img src="${e.image}" alt="" class="products__img">\n                    <h3 class="products__title">${e.title}</h3>\n                    <span class="products__price">${e.price} €</span>\n                    <button class="products__button">\n                        <img src="/app/images/shopping-cart.svg" alt="" width="30px" height="30px">\n                    </button>\n                </figure>\n            `}));const n=document.querySelector(".products__container");return n&&n.insertAdjacentHTML("beforeend",t),e}}(async()=>{const e=new Products,t=await e.getProducts();e.displayProducts(t)})();const globals=()=>({containers:[...document.querySelectorAll(".testimonial__slide")],slides:[...document.querySelectorAll(".testimonial__slide")],nextBtn:document.querySelector(".slider__button-next"),prevBtn:document.querySelector(".slider__button-prev"),currentSlide:0});let{containers:containers,slides:slides,nextBtn:nextBtn,prevBtn:prevBtn,currentSlide:currentSlide}={containers:[...document.querySelectorAll(".testimonial__slide")],slides:[...document.querySelectorAll(".testimonial__slide")],nextBtn:document.querySelector(".slider__button-next"),prevBtn:document.querySelector(".slider__button-prev"),currentSlide:0};class Testimonials{getSlides=async()=>{try{const e=await fetch("/data/slider-data/slides.json");return await e.json()}catch(e){console.error(e)}};displaySlides=e=>{containers&&containers.forEach(((t,n)=>{e.forEach(((e,a)=>{n===a&&(t.innerHTML=`\n                        <div class="testimonial__quote">\n                            <img src="${e.quote}" alt="" width="30px" height="30px">\n                        </div>\n                        <p class="testimonial__description">${e.description}</p>\n                        <h3 class="testimonial__date">${e.date}</h3>\n                        <div class="testimonial__profile">\n                            <img src="${e.image}" alt="user slide" class="testimonial__profile-img">\n                            <div class="testimonial__profile-data">\n                                <span class="testimonial__profile-name">${e.name}</span>\n                                <span class="testimonial__profile-detail">${e.detail}</span>\n                            </div>\n                        </div>`)}))}))};removeActive=(e,t)=>{e[t].classList.remove("active")};addActive=(e,t)=>{e[t].classList.add("active")};sliderAction(){prevBtn&&(prevBtn.onclick=()=>{this.removeActive(slides,currentSlide),currentSlide=(currentSlide-1+slides.length)%slides.length,this.addActive(slides,currentSlide)}),nextBtn&&(nextBtn.onclick=()=>{this.removeActive(slides,currentSlide),currentSlide=(currentSlide+1)%slides.length,this.addActive(slides,currentSlide)})}}(async()=>{const e=new Testimonials,t=await e.getSlides();e.displaySlides(t),e.sliderAction()})();class Team{async getTeam(){try{const e=await fetch("/data/team-data/team-data.json");return await e.json()}catch(e){console.error(e)}}displayTeam(e){const t=document.querySelector(".team__container");e.forEach((e=>{t&&t.insertAdjacentHTML("beforeend",`\n                    <div class="team__card">\n                        <div class="team__card-bcg">\n                            <img src="/app/images/bg-image.jpg" alt="">\n                        </div>\n                        <div class="team__member-pic">\n                            <img src="${e.image}" alt="member">\n                        </div>\n                        <div class="team__memeber-info">\n                            <h4 class="team__member-name">${e.name}</h4>\n                            <span>${e.title}</span>\n                            <p>${e.story}</p>\n                            <ul class="team__social">\n                                <li>\n                                    <a href="${e.faceUrl}" target="_blank">\n                                        <img src="${e.faceIcon}" alt="" width="25px" height="25px">\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href="${e.twitterUrl}" target="_blank">\n                                        <img src="${e.twitterIcon}" alt="" width="25px" height="25px">\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href="${e.instaUrl}" target="_blank">\n                                        <img src="${e.instaIcon}" alt="" width="25px" height="25px">\n                                    </a>\n                                </li>\n                                <li>\n                                    <a href="${e.githubUrl}" target="_blank">\n                                        <img src="${e.githubIcon}" alt="" width="25px" height="25px">\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                `)}))}}function toggleSearch(){const e=document.querySelector(".nav__search"),t=document.querySelector(".nav__search-form"),n=document.querySelector(".close__search"),a=document.querySelector(".nav__search-input");t&&(e.addEventListener("click",(()=>{t.classList.toggle("active-form")})),n.addEventListener("click",(()=>{t.classList.remove("active-form"),a.value=""})))}function filterSearch(){const e=document.querySelector(".nav__search-input").value.toLowerCase();document.querySelectorAll("section").forEach((t=>{e&&t.id.toString().toLowerCase().indexOf(e)>-1&&document.getElementById(t.id).scrollIntoView()}))}function headerOnScroll(){const e=document.getElementById("header");document.body.scrollTop>0||document.documentElement.scrollTop>0?(e.style.background="#1f1f1f",e.style.boxShadow="0 1px 4px #0a0a0a4d"):0!==document.body.scrollTop&&0!==document.documentElement.scrollTop||(e.style.background="transparent",e.style.boxShadow="none")}function toggleMobMenu(){const e=document.getElementById("nav-menu"),t=document.getElementById("nav-toggle"),n=document.getElementById("nav-close"),a=document.querySelector(".nav__search-form");e&&(t.addEventListener("click",(()=>{e.classList.add("show-menu"),function(){if(a.classList.contains("active-form"))a.classList.remove("active-form")}()})),n.addEventListener("click",(()=>{e.classList.remove("show-menu")})))}(async()=>{const e=new Team,t=await e.getTeam();e.displayTeam(t)})(),window.onscroll=function(){headerOnScroll()},toggleMobMenu(),toggleSearch();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
