class Items{async getItems(){try{const t=await fetch("/data/cart-data/cart-items.json"),e=await t.json();return e}catch(t){console.log(t)}}}class Cart{displayCartItems(t){let e="";t.forEach((t=>{e+=`\n                <figure class="cart__card">\n                    <div class="cart__box">\n                        <img src="${t.image}" alt="" class="cart__img">\n                    </div>\n                    <div class="cart__details">\n                        <h4 class="cart__title">${t.title}</h4>\n                        <span class="cart__price">${t.price} €</span>\n                        <div class="cart__amount">\n                            <div class="cart__amount-content">\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-down.svg" alt="" width="20px" height="20px">\n                                </span>\n                                <span class="cart_amount-number">0</span>\n                                <span class="cart__amount-box">\n                                    <img src="/app/images/chevron-up.svg" alt="" width="20px" height="20px">\n                                </span>\n                            </div>\n                            <img src="/app/images/can-trash.svg" alt="" class="cart__amount-trash" width="20px" height="20px">\n                        </div>\n                    </div>\n                </figure>\n            `}));const n=document.querySelector(".cart__container");return n&&n.insertAdjacentHTML("beforeend",e),t}}document.addEventListener("DOMContentLoaded",(()=>{const t=new Items,e=new Cart;t.getItems().then((t=>{e.displayCartItems(t)}))}));const domElements=()=>{const t=document.querySelector(".nav__list"),e=document.querySelector(".nav__menu");return{navList:t,navMenu:e,closeNavMenu:()=>{e&&e.classList.remove("show-menu")}}};let{navList:navList,navMenu:navMenu,closeNavMenu:closeNavMenu}=domElements();class NavLinks{getLinks=async()=>{try{const t=await fetch("/data/nav-data/navlinks.json");return await t.json()}catch(t){console.error(t)}};displayLinks=t=>{let e="";t.forEach((t=>{e+=`\n                <li class="nav__item">\n                    <a href="${t.link}" class="nav__link" onclick="closeNavMenu()">${t.text}</a>\n                </li>\n            `})),navList&&navList.insertAdjacentHTML("beforeend",e)}}(async()=>{const t=new NavLinks,e=await t.getLinks();t.displayLinks(e)})();class Products{async getProducts(){try{const t=await fetch("/data/product-data/product-items.json"),e=await t.json();return e}catch(t){console.log(t)}}}class Shop{displayProducts(t){let e="";t.forEach((t=>{e+=`\n                <figure class="products__card">\n                    <img src="${t.image}" alt="" class="products__img">\n                    <h3 class="products__title">${t.title}</h3>\n                    <span class="products__price">${t.price} €</span>\n                    <button class="products__button">\n                        <img src="/app/images/shopping-cart.svg" alt="" width="30px" height="30px">\n                    </button>\n                </figure>\n            `}));const n=document.querySelector(".products__container");return n&&n.insertAdjacentHTML("beforeend",e),t}}function toggleSearch(){const t=document.querySelector(".nav__search"),e=document.querySelector(".nav__search-form"),n=document.querySelector(".close__search"),c=document.querySelector(".nav__search-input");e&&(t.addEventListener("click",(()=>{e.classList.toggle("active-form")})),n.addEventListener("click",(()=>{e.classList.remove("active-form"),c.value=""})))}function filterSearch(){const t=document.querySelector(".nav__search-input").value.toLowerCase();document.querySelectorAll("section").forEach((e=>{t&&e.id.toString().toLowerCase().indexOf(t)>-1&&document.getElementById(e.id).scrollIntoView()}))}function toggleCart(){const t=document.getElementById("cart"),e=document.getElementById("cart-shop"),n=document.getElementById("cart-close");e&&e.addEventListener("click",(()=>{t.classList.add("show-cart")})),n&&n.addEventListener("click",(()=>{t.classList.remove("show-cart")}))}function headerOnScroll(){const t=document.getElementById("header");document.body.scrollTop>0||document.documentElement.scrollTop>0?(t.style.background="#1f1f1f",t.style.boxShadow="0 1px 4px #0a0a0a4d"):0!==document.body.scrollTop&&0!==document.documentElement.scrollTop||(t.style.background="transparent",t.style.boxShadow="none")}function sliderAction(){const t=[...document.querySelectorAll(".testimonial__slide")],e=document.querySelector(".slider__button-prev"),n=document.querySelector(".slider__button-next");let c=0;const s=e=>{e>=t.length?e=0:e<0&&(e=t.length-1),t[c].classList.toggle("active"),t[e].classList.toggle("active"),c=e};n.addEventListener("click",(()=>{s(c+1)})),e.addEventListener("click",(()=>{s(c-1)}))}function toggleMobMenu(){const t=document.getElementById("nav-menu"),e=document.getElementById("nav-toggle"),n=document.getElementById("nav-close"),c=document.querySelector(".nav__search-form");t&&(e.addEventListener("click",(()=>{t.classList.add("show-menu"),function(){if(c.classList.contains("active-form"))c.classList.remove("active-form")}()})),n.addEventListener("click",(()=>{t.classList.remove("show-menu")})))}document.addEventListener("DOMContentLoaded",(()=>{const t=new Products,e=new Shop;t.getProducts().then((t=>{e.displayProducts(t)}))})),window.onscroll=function(){headerOnScroll()},toggleMobMenu(),toggleSearch(),toggleCart(),sliderAction();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
